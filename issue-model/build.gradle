plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'de.marcphilipp.nexus-publish'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://repo.jenkins-ci.org/releases/'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    useGpgCmd()
    sign configurations.archives
}

tasks.withType(Sign) {
    onlyIf {
        project.hasProperty('signing.gnupg.keyName')
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "com.google.code.gson:gson:$gsonVersion"
    testImplementation "edu.hm.hafner:analysis-model:$analysisModel"

    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'Issue Model'
                description = 'Model classes to represent issues'
                packaging = 'jar'
                url = 'https://' + "$githubRepositoryOwner" + '.github.io/' + "$githubRepositoryName" + '/'
                licenses {
                    license {
                        name = 'Eclipse Public License - v 2.0'
                        url = 'https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'jmini'
                        name = 'Jeremie Bresson'
                        email = 'dev@jmini.fr'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
                    developerConnection = 'scm:git:https://github.com/' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
                    url = 'https://github.com/' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '/'
                }
            }
            from components.java
            artifact sourcesJar
            artifact javadocJar

            if(project.hasProperty('signing.gnupg.keyName')) {
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                    pomFile.delete()
                }
    
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }
}

nexusPublishing {
    packageGroup = 'fr.jmini'
    username = project.findProperty('sonatypeUser') ?: ''
    password = project.findProperty('sonatypePassword') ?: ''
}

model {
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn(project.tasks.signArchives)
    }
    tasks.publishMavenJavaPublicationToNexusRepository {
        dependsOn(project.tasks.signArchives)
    }
}